{
    "_comment": "Spec-Kit Azure Deployment Template - ARM template for Azure Kubernetes Service with constitutional monitoring",
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "projectName": {
            "type": "string",
            "defaultValue": "spec-kit-app",
            "metadata": {
                "description": "Name of the Spec-Kit project"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "staging",
            "allowedValues": [
                "dev",
                "staging",
                "prod"
            ],
            "metadata": {
                "description": "Environment (dev, staging, prod)"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure region for resources"
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.28.0",
            "metadata": {
                "description": "AKS Kubernetes version"
            }
        },
        "nodeCount": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "Number of AKS nodes"
            }
        },
        "nodeVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "VM size for AKS nodes"
            }
        },
        "enableConstitutionalMonitoring": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable constitutional compliance monitoring"
            }
        },
        "databasePassword": {
            "type": "securestring",
            "metadata": {
                "description": "PostgreSQL database password"
            }
        }
    },
    "variables": {
        "resourcePrefix": "[concat(parameters('projectName'), '-', parameters('environment'))]",
        "vnetName": "[concat(variables('resourcePrefix'), '-vnet')]",
        "subnetName": "[concat(variables('resourcePrefix'), '-subnet')]",
        "aksClusterName": "[concat(variables('resourcePrefix'), '-aks')]",
        "acrName": "[replace(concat(variables('resourcePrefix'), 'acr'), '-', '')]",
        "postgresServerName": "[concat(variables('resourcePrefix'), '-postgres')]",
        "redisName": "[concat(variables('resourcePrefix'), '-redis')]",
        "storageAccountName": "[replace(concat(variables('resourcePrefix'), 'storage'), '-', '')]",
        "logAnalyticsName": "[concat(variables('resourcePrefix'), '-logs')]",
        "appInsightsName": "[concat(variables('resourcePrefix'), '-insights')]",
        "keyVaultName": "[concat(variables('resourcePrefix'), '-kv')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2021-02-01",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "10.0.1.0/24"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2021-06-01",
            "name": "[variables('logAnalyticsName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('appInsightsName')]",
            "location": "[parameters('location')]",
            "kind": "web",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ]
        },
        {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2021-09-01",
            "name": "[variables('acrName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "adminUserEnabled": true
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2023-05-01",
            "name": "[variables('aksClusterName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[variables('aksClusterName')]",
                "agentPoolProfiles": [
                    {
                        "name": "nodepool1",
                        "count": "[parameters('nodeCount')]",
                        "vmSize": "[parameters('nodeVMSize')]",
                        "osType": "Linux",
                        "mode": "System",
                        "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
                        "enableAutoScaling": true,
                        "minCount": 1,
                        "maxCount": "[mul(parameters('nodeCount'), 2)]"
                    }
                ],
                "networkProfile": {
                    "networkPlugin": "azure",
                    "serviceCidr": "10.1.0.0/16",
                    "dnsServiceIP": "10.1.0.10"
                },
                "addonProfiles": {
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
                        }
                    },
                    "azureKeyvaultSecretsProvider": {
                        "enabled": true
                    },
                    "ingressApplicationGateway": {
                        "enabled": true,
                        "config": {
                            "applicationGatewayName": "[concat(variables('resourcePrefix'), '-agw')]",
                            "subnetCIDR": "10.0.2.0/24"
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(resourceGroup().id, variables('aksClusterName'), 'AcrPull')]",
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2023-05-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]"
            ]
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers",
            "apiVersion": "2022-12-01",
            "name": "[variables('postgresServerName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "sku": {
                "name": "Standard_B1ms",
                "tier": "Burstable"
            },
            "properties": {
                "administratorLogin": "speckit_admin",
                "administratorLoginPassword": "[parameters('databasePassword')]",
                "version": "15",
                "storage": {
                    "storageSizeGB": 32
                },
                "backup": {
                    "backupRetentionDays": 7,
                    "geoRedundantBackup": "Disabled"
                },
                "network": {
                    "delegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Cache/redis",
            "apiVersion": "2022-06-01",
            "name": "[variables('redisName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "properties": {
                "sku": {
                    "name": "Standard",
                    "family": "C",
                    "capacity": 1
                },
                "redisVersion": "6",
                "enableNonSslPort": false,
                "minimumTlsVersion": "1.2"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-08-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2022-07-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "framework": "spec-kit"
            },
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2023-05-01', 'Full').identityProfile.kubeletidentity.objectId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ],
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 7
            },
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('keyVaultName'), '/database-password')]",
            "properties": {
                "value": "[parameters('databasePassword')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('keyVaultName'), '/redis-access-key')]",
            "properties": {
                "value": "[listKeys(resourceId('Microsoft.Cache/redis', variables('redisName')), '2022-06-01').primaryKey]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Cache/redis', variables('redisName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2022-07-01",
            "name": "[concat(variables('keyVaultName'), '/storage-connection-string')]",
            "properties": {
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        }
    ],
    "outputs": {
        "aksClusterName": {
            "type": "string",
            "value": "[variables('aksClusterName')]"
        },
        "acrLoginServer": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))).loginServer]"
        },
        "postgresServerFQDN": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgresServerName'))).fullyQualifiedDomainName]"
        },
        "redisHostName": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Cache/redis', variables('redisName'))).hostName]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "keyVaultUri": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
        },
        "applicationInsightsInstrumentationKey": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
        }
    ]
}